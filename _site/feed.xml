<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Manik Kumar</title>
    <description>Manik ü§ñüíª
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 May 2020 02:35:51 -0400</pubDate>
    <lastBuildDate>Fri, 22 May 2020 02:35:51 -0400</lastBuildDate>
    <generator>Jekyll v3.6.3</generator>
    
      <item>
        <title>Editing icons for installed applications on macOS programmatically.</title>
        <description>&lt;p&gt;This article will go through two different ways on how one could programmatically change app icons on macOS.&lt;/p&gt;

&lt;p&gt;There have been multiple ways one could manually go about changing app icons for installed apps on macOS, which include replacing dragging an icon file on the application icon in the applications inspector window or using a 3rd party app like LiteIcon to do so. This can potentially be annoying as icons change back to defaults if you update the app or simply because it is a pretty tedious process.&lt;/p&gt;

&lt;p&gt;This process can potentially be automated by using a script to replace the icons.&lt;/p&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;

&lt;h4 id=&quot;the-easier-way&quot;&gt;The easier way&lt;/h4&gt;

&lt;p&gt;By using the ‚Äòfileicon‚Äô utility by Michael Klement&lt;sup&gt;[1]&lt;/sup&gt; we can pretty much change icons for any file or folder on macOS. Using the following command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fileicon set [path_to_file] [path_to_icon]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or remove the set icon using&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fileicon remove [path_to_file] [path_to_icon]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;fileicon can be installed using brew, make sure you have the command line tools installed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install fileicon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here‚Äôs an example script, written using the fileicon utility&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;icon_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;app_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/Applications/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.app&quot;&lt;/span&gt;

fileicon &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;saving the above as replace.sh and calling&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./replace.sh desktop/iconreplacement.icns Spotify
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would change the Spotify‚Äôs app icon.&lt;/p&gt;

&lt;p&gt;fileicon is capable of assigning any image format macOS is capable of reading to most files and folders, I would recommend using fileicon for most scripting projects.&lt;/p&gt;

&lt;h4 id=&quot;the-harder-way&quot;&gt;The harder way&lt;/h4&gt;

&lt;p&gt;I recommend going with the previously mentioned method unless you know what you‚Äôre doing.&lt;/p&gt;

&lt;p&gt;Applications on macOS function like folders, you can right-click on a folder and select ‚Äòshow package contents‚Äô to browse the contents of an app.&lt;/p&gt;

&lt;p&gt;In the contents directory of an application, we should find a file called ‚ÄòInfo.plist‚Äô, inside the mentioned plist file we‚Äôre looking for three entries&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CFBundleIconFile:
Icon that shows up in dock and Launchpad&lt;sup&gt;[2]&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;CFBundleIconFileDark:
Icon that shows up in the dock and Launchpad when dark mode is enabled&lt;sup&gt;[2]&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;CFBundleTypeIconFile:
Icon that shows up when on a file that can be showed up in the said application&lt;sup&gt;[2]&lt;/sup&gt;. As a caution, often applications can support opening a lot of different kinds of formats, which leads to dealing with a lot of different icons or just convoluted code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The icon files specified in the Contents/Resources directory. It‚Äôs relatively easy to write code to replace the icons.&lt;/p&gt;

&lt;p&gt;After replacing the icons specified by the plist, we‚Äôll need to refresh the icon cache. There are numerous ways to execute this as discussed in a Github &lt;a href=&quot;https://gist.github.com/fabiofl/5873100&quot;&gt;Gist&lt;/a&gt; by Fabio Fernandesthread&lt;sup&gt;[3]&lt;/sup&gt; with a discussion about their drawbacks.&lt;/p&gt;

&lt;p&gt;I‚Äôve found the easiest way to achieve this is by simply &lt;a href=&quot;https://gist.github.com/fabiofl/5873100#gistcomment-1320553&quot;&gt;touching&lt;/a&gt; the application, and restarting Finder and Dock.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch /Applications/[name].app
killall Finder &amp;amp;&amp;amp; killall Dock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;[1] fileicon. Michael Klement, &lt;a href=&quot;https://github.com/mklement0/fileicon&quot;&gt;Github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] Core Foundation Keys. &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html&quot;&gt;Apple Documentation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] ‚ÄúClear Mac OS X‚Äôs icon cache‚Äù. Fabio Fernandes. &lt;a href=&quot;https://gist.github.com/fabiofl/5873100&quot;&gt;Github Gist.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2020 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2020/05/macicons.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/05/macicons.html</guid>
        
        <category>macOS</category>
        
        <category>Scripting</category>
        
        <category>Guide</category>
        
        
      </item>
    
      <item>
        <title>Maximum Likelihood Estimation of Gumbel Distribution</title>
        <description>&lt;p&gt;This is a write up to derive the maximum liklihood solution for estimation of a gumbel distribution, this write up also assumes basic knowledge of estimation theory.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with the probability density function of the gumbel distribution, which is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x)=\frac{1}{\beta}e^{\frac{x-\alpha}{\beta}}e^{-e^{\frac{x-\alpha}{\beta}}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{where }\alpha \text{ and } \beta \text{ are parameters and }\alpha \in \mathbb{R}, \beta &gt; 0&lt;/script&gt;

&lt;p&gt;Maximum liklihood solution can be written as,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{f}_{M L}=\underset{\alpha \in \mathbb{R}, \beta&gt;0}{\operatorname{argmax}} \in \mathbb{R}, \beta&gt;0(P(D | \alpha, \beta))&lt;/script&gt;

&lt;p&gt;where &lt;em&gt;D&lt;/em&gt; represents the set of datapoints.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathrm{f}_{M L}=\underset{\alpha \in \mathbb{R}, \beta&gt;0}{\operatorname{argmax}} \in \mathbb{R}, \beta&gt;0(\prod_{i=1}^n P(x_i | \alpha, \beta))&lt;/script&gt;

&lt;p&gt;where &lt;em&gt;x&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; represents each datapoint.&lt;/p&gt;

&lt;p&gt;Now onto calculating the log-likelihood,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;=\ln \left(\prod_{i=0}^{n} P\left(x_{i} | \alpha, \beta\right)\right)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;=\sum_{i=0}^{n} \ln P\left(\left(x_{i} | \alpha, \beta\right)\right)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;=\sum_{i=0}^{n} \ln \left(\frac{1}{\beta} e^{-\frac{y_{i}-\alpha}{\beta}} e^{-e^{-\frac{j_{j}-a}{\beta}}}\right)&lt;/script&gt;

&lt;p&gt;We end up with an equation with 2 variables in it, we‚Äôll be using &lt;a href=&quot;http://www.sosmath.com/calculus/diff/der07/der07.html&quot;&gt;the Newton-Raphson method&lt;/a&gt; to approximate the roots of the equation. I recommend reading through the link if you‚Äôre familiar with the approximation method.&lt;/p&gt;

&lt;p&gt;Finding derivatives, with respect to both &lt;em&gt;Œ±&lt;/em&gt; and &lt;em&gt;Œ≤&lt;/em&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial f}{\partial \beta}=\sum_{i=0}^{n} \frac{x_{i}-n}{\beta^{2}}-\frac{n}{\beta}-\sum_{i=0}^{n} \frac{x_{i}-\alpha}{\beta} e^{-\frac{z_{i}-\alpha}{\beta}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial f}{\partial \alpha}=\frac{n}{\beta}-\frac{1}{\beta} \sum_{i=0}^{n} e^{-\frac{z_{i}-\alpha}{\beta}}&lt;/script&gt;

&lt;p&gt;For the Newron-Raphson approximation method, we require double derivatives, which we use to calculate the Hessian matrix.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial^{2} f}{\partial \beta^{2}}=\frac{n}{\beta^{2}}-\frac{2}{\beta^{2}} \sum_{i=0}^{n}\left(x_{i}-\alpha\right)+\frac{2}{\beta^{3}} \sum_{i=0}^{n}\left(x_{i}-\alpha\right) e^{\frac{-\left(x_{i}-\alpha\right)}{\beta}}+\frac{2}{\beta^{4}} \sum_{i=0}^{n}\left(x_{i}-\alpha\right)^{2} e^{\frac{-\left(x_{j}-\alpha\right)}{\beta}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial^{2} f}{\partial \alpha^{2}}=\frac{-i}{\beta^{2}} \sum_{i=0}^{n} e^{-\frac{x_{i}-a}{\beta}}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial^{2} f}{\partial \alpha \beta}=-\frac{n}{\beta^{2}}+\frac{1}{\beta^{2}} \sum_{i=0}^{n} e^{\frac{-\left(x_{i}-\alpha\right)}{\beta}}-\frac{1}{\beta^{3}} \sum_{i=0}^{n}\left(x_{i}-\alpha\right) e^{\frac{-\left(x_{i}-a\right)}{\beta}}&lt;/script&gt;

&lt;p&gt;The Hessian matrix can be calculated by,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
H=\left[\begin{array}{ll}\frac{\partial^{2} f}{\partial \alpha^{2}} &amp; \frac{\partial^{2} f}{\partial \alpha \beta} \\ \frac{\partial^{2} f}{\partial \alpha \beta} &amp; \frac{\partial^{2} f}{\partial \beta^{2}}\end{array}\right] %]]&gt;&lt;/script&gt;

&lt;p&gt;We also need a f matrix with the equations we‚Äôre solving for,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f=\left[\begin{array}{l}\frac{\partial f}{\partial \alpha} \\ \frac{\partial f}{\partial \beta}\end{array}\right]&lt;/script&gt;

&lt;p&gt;Now we can follow the following algorithm to estimate the parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1 :&lt;/strong&gt;
We‚Äôll choose starting values for Œ± and Œ≤, Œ±(0) and Œ≤(0) using the method of moment estimators.&lt;/p&gt;

&lt;p&gt;Œ≤ = 0.7977‚àó standard deviation of the dataset
Œ± = mean of the dataset - 0.4501 * standard deviation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choose a tolerance t for the change, 10^(‚àí10) in our case. If the level of changes are less than the tolerance the iterations will break.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obtain inverse of the Hessian Matrix inv(H(Œ±(0))(Œ≤(0))) and f(Œ±(0))(Œ≤(0))&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4 :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obtain new values of Œ± and Œ≤, Œ±(new) and Œ≤(new), from the Newton Raphson algorithm,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\left[\begin{array}{l}\alpha^{(n e w)} \\ \beta^{(n e w)}\end{array}\right]=\left[\begin{array}{l}\alpha^{(o l d)} \\ \beta^{(o l d)}\end{array}\right]-H^{-1}\left(\alpha^{(o l d)}, \beta^{(o l d)}\right) f\left(\alpha^{(o l d)}, \beta^{(o l d)}\right)&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Step 5 :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check to see if the differences between new and the old values are small enough and compare it by the set tolerance,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[\left(\alpha^{(n e w)}-\alpha^{(o l d)}\right)^{2}+\left(\beta^{(n e w)}-\beta^{(o l d)}\right)^{2}&lt;t\right] %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;if No, then return to Step(3), and calculate H‚àí1(Œ±(new))(Œ≤(new)) and f(Œ±(new))(Œ≤(new)) and keep iterating.&lt;/li&gt;
  &lt;li&gt;if Yes, then stop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following are the results of the above algorithm for a gumbel destibution generated using Œ± = 2.3 and Œ≤ = 4.0 ran multiple times and averaged.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EjvbGg5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mnk400/gumbelMLE&quot;&gt;Link to the code.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Feb 2020 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2020/02/gumble-mle.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/02/gumble-mle.html</guid>
        
        <category>Machine-Learning</category>
        
        <category>Estimation</category>
        
        
      </item>
    
  </channel>
</rss>
